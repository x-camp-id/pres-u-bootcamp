[
    {
        "id": "14bf0b19509bd519",
        "type": "mqtt in",
        "z": "6ac9aa3ad906acf8",
        "name": "Sensor Data MQTT",
        "topic": "pres-u/NIM/#",
        "qos": "0",
        "datatype": "json",
        "broker": "36958887aa3a708e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "1de39752c3db4025"
            ]
        ]
    },
    {
        "id": "89cbef0af08cc1c4",
        "type": "mqtt out",
        "z": "6ac9aa3ad906acf8",
        "name": "LED Commands",
        "topic": "pres-u/NIM/led_control",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "36958887aa3a708e",
        "x": 740,
        "y": 720,
        "wires": []
    },
    {
        "id": "a962ba951eb0781b",
        "type": "mqtt in",
        "z": "6ac9aa3ad906acf8",
        "name": "",
        "topic": "downlink/ds/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ae979b094e789c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 860,
        "wires": [
            [
                "70881e93c13502b4"
            ]
        ]
    },
    {
        "id": "c3b7795d192067cf",
        "type": "debug",
        "z": "6ac9aa3ad906acf8",
        "name": "Blynk Parsed LED Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 860,
        "wires": []
    },
    {
        "id": "5cebc044953b7c59",
        "type": "comment",
        "z": "6ac9aa3ad906acf8",
        "name": "for controlling LED, value is 0 and 1",
        "info": "for controlling LED, value is 0 and 1",
        "x": 380,
        "y": 820,
        "wires": []
    },
    {
        "id": "876537d054f19579",
        "type": "function",
        "z": "6ac9aa3ad906acf8",
        "name": "Process Temperature",
        "func": "// Define temperature threshold\nconst threshold = {\n    good: { min: 18, max: 25 },    // 18-25°C is good\n    moderate: { min: 15, max: 30 } // 15-30°C is moderate\n}\n\n// Obtain Flow Context on Temperature Status\nvar tempStatus = flow.get(\"temp_status\") || \"\";\n\n// Extract temperature from message\nvar value = parseFloat(msg.payload) || 0.0;\n\n// Evaluate temperature status\nif (value >= threshold.good.min && value <= threshold.good.max) {\n    tempStatus = \"good\";\n    \n} else if (value >= threshold.moderate.min && value <= threshold.moderate.max) {\n    tempStatus = \"moderate\";\n} else {\n    tempStatus = \"critical\";\n}\n\n// Set Status\nflow.set(\"temp_status\", tempStatus);\n\n// Set msg payload and return msg\nmsg.payload = value;               \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "6fa3818a9d0297a5",
                "6c18dab3e298b526",
                "bf0b3d66a5327e13",
                "f86f5780cef7ab99"
            ]
        ]
    },
    {
        "id": "0b762f92cfb1f094",
        "type": "function",
        "z": "6ac9aa3ad906acf8",
        "name": "Process Humidity",
        "func": "// Define humidity threshold\nconst threshold = {\n    good: { min: 40, max: 60 },    // 40-60% is good\n    moderate: { min: 30, max: 70 } // 30-70% is moderate\n}\n\n// Obtain Flow Context on Humidity Status\nvar humStatus = flow.get(\"humidity_status\") || \"\";\n\n// Extract humidity from message\nvar value = parseFloat(msg.payload) || 0.0;\n\n// Evaluate humidity status\nif (value >= threshold.good.min && value <= threshold.good.max) {\n    humStatus = \"good\";\n    \n} else if (value >= threshold.moderate.min && value <= threshold.moderate.max) {\n    humStatus = \"moderate\";\n} else {\n    humStatus = \"critical\";\n}\n\n// Set Status\nflow.set(\"humidity_status\", humStatus);\n\n// Set msg payload and return msg\nmsg.payload = value;               \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "cf6f4ff4531e02f6",
                "febf29bd339bb2e8",
                "de6b25c1054ddbed",
                "fab206e3da4f63b8"
            ]
        ]
    },
    {
        "id": "44bb6dfd4aa04517",
        "type": "function",
        "z": "6ac9aa3ad906acf8",
        "name": "Process Gas Concentration",
        "func": "// 1. Get Voltage from Message\nvar voltage = msg.payload;\nif (typeof voltage !== 'number') {\n    voltage = parseFloat(voltage);\n    if (isNaN(voltage)) {\n        voltage = 5.0; // Default VCC value\n    }\n}\n\n// Return the raw voltage\nmsg.payload = voltage;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 520,
        "wires": [
            [
                "515df4610f878a16",
                "c8590f14839c9f60",
                "8f20b125981f53d0",
                "89deeb4cd656b16c"
            ]
        ]
    },
    {
        "id": "6fa3818a9d0297a5",
        "type": "debug",
        "z": "6ac9aa3ad906acf8",
        "name": "Temp. Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 80,
        "wires": []
    },
    {
        "id": "6c18dab3e298b526",
        "type": "mqtt out",
        "z": "6ac9aa3ad906acf8",
        "name": "Blynk Temp.",
        "topic": "ds/temperature",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ae979b094e789c",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "cf6f4ff4531e02f6",
        "type": "debug",
        "z": "6ac9aa3ad906acf8",
        "name": "Hum. Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 280,
        "wires": []
    },
    {
        "id": "febf29bd339bb2e8",
        "type": "mqtt out",
        "z": "6ac9aa3ad906acf8",
        "name": "Blynk Hum.",
        "topic": "ds/humidity",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ae979b094e789c",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "515df4610f878a16",
        "type": "debug",
        "z": "6ac9aa3ad906acf8",
        "name": "Gas Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 480,
        "wires": []
    },
    {
        "id": "c8590f14839c9f60",
        "type": "mqtt out",
        "z": "6ac9aa3ad906acf8",
        "name": "Blynk Gas",
        "topic": "ds/gas",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ae979b094e789c",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "bf0b3d66a5327e13",
        "type": "link out",
        "z": "6ac9aa3ad906acf8",
        "name": "Temp. msg out",
        "mode": "link",
        "links": [
            "8e4569acc06c9270"
        ],
        "x": 875,
        "y": 40,
        "wires": []
    },
    {
        "id": "de6b25c1054ddbed",
        "type": "link out",
        "z": "6ac9aa3ad906acf8",
        "name": "Hum msg out",
        "mode": "link",
        "links": [
            "8e4569acc06c9270"
        ],
        "x": 875,
        "y": 240,
        "wires": []
    },
    {
        "id": "8f20b125981f53d0",
        "type": "link out",
        "z": "6ac9aa3ad906acf8",
        "name": "Gas msg out",
        "mode": "link",
        "links": [
            "8e4569acc06c9270"
        ],
        "x": 875,
        "y": 440,
        "wires": []
    },
    {
        "id": "8e4569acc06c9270",
        "type": "link in",
        "z": "6ac9aa3ad906acf8",
        "name": "Temp. Hum. Gas in",
        "links": [
            "8f20b125981f53d0",
            "bf0b3d66a5327e13",
            "de6b25c1054ddbed"
        ],
        "x": 225,
        "y": 720,
        "wires": [
            [
                "9aa8bccb3e542b01"
            ]
        ]
    },
    {
        "id": "9aa8bccb3e542b01",
        "type": "function",
        "z": "6ac9aa3ad906acf8",
        "name": "Evaluate LED Status",
        "func": "var tempStatus = flow.get(\"temp_status\");\nvar humStatus = flow.get(\"hum_status\");\nvar gasStatus = flow.get(\"gas_status\");\n\n// Set LED status\nvar ledStatus = flow.get(\"led_status\") || \"OFF\";\n\n// check if all status is 'good'\nif (tempStatus == \"good\" && humStatus == \"good\" && gasStatus == \"good\"){\n    ledStatus = \"OFF\";\n} else {\n    ledStatus = \"ON\";\n}\n\nmsg.payload = ledStatus.toString();\nflow.set(\"led_status\", ledStatus);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "89cbef0af08cc1c4",
                "57376ce67f885176"
            ]
        ]
    },
    {
        "id": "f86f5780cef7ab99",
        "type": "ui-chart",
        "z": "6ac9aa3ad906acf8",
        "group": "sensors",
        "name": "Temperature Chart",
        "label": "chart",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "fab206e3da4f63b8",
        "type": "ui-chart",
        "z": "6ac9aa3ad906acf8",
        "group": "sensors",
        "name": "Humidity Chart",
        "label": "chart",
        "order": 6,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 940,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "89deeb4cd656b16c",
        "type": "ui-chart",
        "z": "6ac9aa3ad906acf8",
        "group": "sensors",
        "name": "Gas concentration chart",
        "label": "chart",
        "order": 5,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 970,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "57376ce67f885176",
        "type": "debug",
        "z": "6ac9aa3ad906acf8",
        "name": "LED Status MQTT Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "70881e93c13502b4",
        "type": "function",
        "z": "6ac9aa3ad906acf8",
        "name": "Parse Blynk Command",
        "func": "var blynkLed = msg.payload\nvar ledStatus = flow.get(\"led_status\") || false;\n\nif (blynkLed == 1) {\n    ledStatus = true;\n} else {\n    ledStatus = false;\n}\n\nflow.set(\"led_status\", ledStatus);\nmsg.payload = ledStatus.toString();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 860,
        "wires": [
            [
                "c3b7795d192067cf",
                "89cbef0af08cc1c4"
            ]
        ]
    },
    {
        "id": "8ce899f79ec3a983",
        "type": "comment",
        "z": "6ac9aa3ad906acf8",
        "name": "Flow Contexts Evaluation for LED Status",
        "info": "to evaluate LED status based on Flow Contexts",
        "x": 360,
        "y": 680,
        "wires": []
    },
    {
        "id": "1de39752c3db4025",
        "type": "switch",
        "z": "6ac9aa3ad906acf8",
        "name": "Switch Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pres-u/NIM/temp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pres-u/NIM/hum",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pres-u/NIM/gas",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "876537d054f19579"
            ],
            [
                "0b762f92cfb1f094"
            ],
            [
                "44bb6dfd4aa04517"
            ]
        ]
    },
    {
        "id": "36958887aa3a708e",
        "type": "mqtt-broker",
        "name": "X-CAMP Broker TBMQ",
        "broker": "broker.xdevelopment.my.id",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "21ae979b094e789c",
        "type": "mqtt-broker",
        "name": "Blynk-cloud",
        "broker": "blynk.cloud",
        "port": "8883",
        "tls": "fe395f593944e86a",
        "clientid": "",
        "autoConnect": false,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "ds/Terminal",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "|BLYNK| Type \"help\" for the list of available commands",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "sensors",
        "type": "ui-group",
        "name": "Sensor Readings",
        "page": "main_page",
        "width": 12,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fe395f593944e86a",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ISRG_Root_X1.der",
        "servername": "fra.blynk-qa.com",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "main_page",
        "type": "ui-page",
        "name": "IoT Sensor Dashboard",
        "ui": "main_ui",
        "path": "/dashboard",
        "icon": "mdi-view-dashboard",
        "layout": "grid",
        "theme": "18fb132c619748b9",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "main_ui",
        "type": "ui-base",
        "name": "Dashboard 2.0",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false
    },
    {
        "id": "18fb132c619748b9",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]